name: Java CI with Maven, SonarQube, and Production Deployment

on:
  push:
    branches:
      - master
      - 'feature/*'
  pull_request:
    branches:
      - master
      - 'feature/*'
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Trigger deploy to production'
        required: true
        default: 'false'

jobs:
  # Parallel Job: Build and Test on Self-Hosted EC2 (with Tomcat installed)
  build_and_test:
    # This job will run on a self-hosted runner with the "staging" label.
    # Ensure your self-hosted runner for staging has the label `staging` assigned to it.
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat installed (Staging)
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Environment Setup Script (env-setup.sh)
        run: |
          chmod +x ./env-setup.sh
          ./env-setup.sh  # This sets up Java, Maven, etc.

      - name: Build with Maven
        run: mvn clean install -DskipTests
        #if: ${{ github.event_name != 'pull_request' }}  # Only run on push events, skip for PR

      - name: Run Unit Tests with Maven
        run: mvn test
        if: ${{ success() }}  # Run this step only if the previous build step succeeded

  # Sequential Jobs: SonarQube Analysis and Artifact Upload
  sonar_analysis:
    # This job will also run on the self-hosted runner with the "staging" label.
    # Ensure the staging runner has the "staging" label.
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat installed (Staging)
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'success' }}  # Run only if build and test succeed
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run SonarQube analysis
        #uses: SonarSource/sonarcloud-github-action@v1
        #with:
         # sonar-token: ${{ secrets.SONAR_TOKEN }}
         # sonar-host-url: 'https://sonarcloud.io'
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.organization=sonyhl05\
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.projectKey=sonyhl05_Hello-world-GH-Actions \
            -Dsonar.login=d81b187ca87e07fb15087a45e3d7763ff6cc4c31
  upload_artifact:
    # This job will also run on the self-hosted runner with the "staging" label.
    # Ensure the staging runner has the "staging" label.
    runs-on: [self-hosted, staging]  # Self-hosted EC2 with Tomcat installed (Staging)
    needs: build_and_test
    if: ${{ needs.build_and_test.result == 'success' }}  # Run only if build and test succeed
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Upload Artifact to JFrog Artifactory
        run: |
          echo "Uploading artifact to JFrog Artifactory..."
          curl -u "admin:cmVmdGtuOjAxOjE3Njg1NDM4NTQ6QU1JZWlyVk5GakQ5aFBDTEE1TUJ6Y0U4VHdK" \
               -T target/my-helloworld-1.0-SNAPSHOT.war \
               "http://3.110.223.11:8082/artifactory/github-action-assign-libs-snapshot/my-helloworld-1.0-SNAPSHOT.war"
